# 設計
+ 仮説を検証するためにいくつか制約を設ける
 + 制約は少なくシンプルに、かつ強力である様に考えたい

## 用語
この文書内で用いる単語を（勝手に）定義する

単語             | 意味                                                              
:--              | :--                                                               
業務ロジック     | 任意の値に基づく条件判定や値の変換等、**仕様上存在するロジック**を指す
業務フロー       | 1つの要件を実現するために行う連続した処理を指す                   
業務             | 業務フローが繋ぐ処理のひとつひとつを指す                          
システムロジック | DBアクセスやHttp通信等、**システム実現のために必要なロジック**を指す  
関数             | 同じ入力を与えると必ず同じ結果を返す**失敗のない**処理を指す
アクション       | DBアクセスやOSコマンドの実行等の**失敗するかもしれない**処理を指す

## システム要件
+ HttpのApiであるとする
+ Jsonをリクエストとして受け付ける
+ Jsonをレスポンスとして返す
+ フレームワークは用いない
+ アラーム通知等の異常系ハンドリングはひとまず考慮しない

## Api層
Serviceを呼ぶ層

### 仮説
+ リクエストの受付と入力バリデーション、Service呼び出しおよびレスポンスの返却に責任を持つのではないか
 + Serviceの返却値を適切なレスポンスに変換するのもこの層である
 + Serviceの返却値をApiの返却値に変換することで、ApiのインターフェースとServiceの実装の依存度を下げることが出来るのではないか

### 制約
+ 特になし

### 備考
+ Jsonは面倒なので文字列の羅列で済ます
+ ひとまずバリデーションの実装は省略する
 + する場合はForm層の様なものを用意するかもしれない
+ 後述の制約を踏まえると、唯一Service層が呼べる層となる

## Domain層
他の層には依存しない業務ロジックを書く層

### 仮説
+ 全ての業務ロジックは関数のみで実現できるのではないか
+ アクションを完全に排除すればシステムロジックが記述できないので、業務ロジックだけが集まるのではないか
+ またその結果他の層から完全に独立させることが出来るのではないか
 + Domainは他の層から参照されるが他の層は参照をしないべきという教えがあったため
 + システムロジックと業務ロジックが分離するとプロダクトの全体像が把握しにくくなるのではないかと言う懸念もある

### 制約
+ 一切のアクション定義を禁止する

### 備考
+ 業務ロジックにより作られた結果をシステムがどう扱うかはこの層の関与するところではない、としてみる

## Service層
DomainとRepositoryを扱う層

### 仮説
+ 関数を書きたくなる場合、それは実はシステムロジックではなく業務ロジックなのではないか
 + なのでServiceでの関数の作成を禁止したら関数は唯一作成が許されているDomainに自然と集まるのではないか
 + 例えばDomainに対する複合条件をServiceで`isXxx = isA and isB`と実現してしまいがちだが、それら業務ロジックをDomainに書かざるを得ない
+ ServiceはただRepositoryを合成するだけにすれば、実現したい要件の業務フローを現す層になるのではないか

### 制約
+ 一切の関数定義を禁止する
+ 他Serviceの呼び出しを禁止する

### 備考

## Repository層
Domainを受けてDataSourceに命じる層

### 仮説
+ 関数とアクションに関してはServiceと同様
+ Repositoryのとある1つの処理でとある1つの業務を現す様にすれば、Serviceはそれを結合するだけで業務フローになるのではないか

### 制約
+ 一切の関数定義を禁止する
+ Serviceの呼び出しを禁止する

### 備考
+ Repositoryが他のRepositoryを扱えるのか禁止するのかは要検討
+ 業務ロジックがある訳ではなく、業務ロジックに則って作られた情報を処理する層であるとする
 + 業務の実現とはつまるところ外部システムの操作であり、その手段自体に責任を持つ層だと言う考え

## DataSource層
一切の業務ロジックを持たず、ただ外部とのやりとりのみを行う層

### 仮説
+ DataSourceをただの処理集として業務ロジックに依存しない様にすれば再利用性が高まるのではないか

### 制約
+ 一切の関数定義を禁止する

### 備考
+ この演習ではこの層の詳細な内部実装については関心がないので、外部システムは全てDBであるとし、それをメモリ上のグローバル変数ででも実現する
+ DIやロギング、セッション管理等も特に気にしない
