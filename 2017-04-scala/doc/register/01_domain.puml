@startuml

package domain {
  package user {
    package authentication {
      class Password {
        String
      }
    }

    package register {
      class AppliedUser {
        UserName
        Address
        Age
        EMail
        RegistrationDate
        CreditCardNumber
      }

      interface UserRegisterRepository {
        UserId, Password register(AppliedUser)
      }

      package same_user_validation {
        class SameUserValidation {
          UserName
        }

        interface SameUserValidationRepository {
          Either[AlreadyRegistered, Unit] isValid(SameUserValidation)
        }

        class AlreadyRegistered {
          UserName
          UserRegistrationError toRegistrationError()
        }

        SameUserValidationRepository --> AlreadyRegistered
      }

      class UserRegistration {
        Either[UserRegistrationError, AppliedUser] register(UserName, Address, Age, Email, RegistrationDate, Either[AlreadyRegistered, Unit], Either[CreditCardInvalidReason, Unit])
      }

      package error {
        class UserRegistrationError {
        }

        enum UserRegistrationInvalidReason {
          NonAdult, AlreadyRegistered, InvalidCreditCard
        }

        class UserRegistrationInvalidMessage {
          String
        }

        UserRegistrationError --> UserRegistrationInvalidReason
        UserRegistrationError --> UserRegistrationInvalidMessage
      }

      UserRegistration --> UserRegistrationError
      UserRegistration --> AppliedUser
    }

    class Age {
      Int
      Either[InvalidAge, Unit] isAdult()
    }

    class InvalidAge {
      Int
      UserRegistrationError toRegistrationError()
    }

    Age --> InvalidAge

    enum Course {
      Free, Toll
    }
  }

  package credit_card {
    interface CreditCardRepository {
      Either[CreditCardInvalidReason, Unit] isValid(CreditCardNumber)
    }

    class CreditCardNumber {
      String
      MaskedCreditCardNumberNumber mask()
    }

    enum CreditCardInvalidReason {
      InvalidNumber, InvalidBirthDay
      UserRegistrationError toRegistrationError()
    }

    CreditCardRepository -right-> CreditCardInvalidReason
  }
}

namespace data_source {
  namespace credit_card {
    class CreditCardRepositoryImpl {
    }

    class CreditCardInvalidCode {
      Int
      CreditCardInvalidReason toReason()
    }

    CreditCardRepositoryImpl -up-|> .CreditCardRepository
    CreditCardRepositoryImpl -right-> CreditCardInvalidCode
  }
}

@enduml