@startuml

namespace api {
  namespace validation {
    class ValidationError {
      String
    }
  }

  namespace user {
    namespace register {
      class UserRegisterApi {
        UserRegisterResponse register(...)
      }

      class UserRegisterResponse {
        Map<String, String>
        {static} UserRegisterResponse create(Either[ValidationError, Either[UserRegistrationError, (UserId, Password)]])
        String toJson()
      }

      UserRegisterApi -right-> UserRegisterResponse

      package form {
        class UserNameForm {
          Either[ValidationError, UserName] bind()
        }
        class AddressForm
        class AgeForm
        class EMailForm
        class RegistrationDateForm
        class CreditCardNumberForm
      }

      UserRegisterApi -up-> .UserNameForm
      UserRegisterApi -up-> .AddressForm
      UserRegisterApi -up-> .AgeForm
      UserRegisterApi -up-> .EMailForm
      UserRegisterApi -up-> .RegistrationDateForm
      UserRegisterApi -up-> .CreditCardNumberForm
    }
  }
}

package service {
  package user {
    package register {
      class UserRegisterService {
        Either[UserRegistrationError, (UserId, Password)] register(....)
      }
    }

    api.user.register.UserRegisterApi -down-> UserRegisterService
  }
}


package domain {
  interface SameUserValidationRepository
  interface CreditCardRepository
  interface UserRegisterRepository

  class UserRegistration {
    Either[UserRegistrationError, AppliedUser] register(....)
  }

  class SameUserValidation
  class CreditCard
  class UserRegistrationError
}

UserRegisterService --> UserRegistration
UserRegisterService --> UserRegistrationError
UserRegisterService --> SameUserValidation
UserRegisterService --> CreditCard

UserRegisterService --> SameUserValidationRepository
UserRegisterService --> CreditCardRepository
UserRegisterService --> UserRegisterRepository

@enduml
