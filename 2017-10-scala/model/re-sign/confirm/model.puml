@startuml

package withdraw {
  package confirm {
    class WithdrawalConfirmApplication {
      - UserId
    }
  }
  package application {
    class WithdrawApplication {
      - UserId
    }
    class WithdrawApplicationDateTime {
      - LocalDateTime
    }
    class WithdrawApplicablePolicy {
      + {static] Either[RejectReason, Unit] check(() => WithdrawnUser)
    }
  }
  package user {
    class WithdrawUser<<UserEntity>> {
      - UserId
      - UserName
      - Address
      - BirthDate
      - MailAddress
      - AdmitApplicationDateTime
      + WithdrawnUser apply(now)
    }
    class WithdrawnUser<<UserEntity>> {
      - UserId
      - WithdrawApplicationDateTime
    }
    interface WithdrawUserRepository {
      + WithdrawUser findWithdraw(UserId)
      + withdraw(WithdrawnUser)
      + WithdrawnUser findWithdrawn(UserId)
    }
    WithdrawUser --> WithdrawnUser
    WithdrawUserRepository --> WithdrawnUser
    WithdrawUserRepository -> WithdrawUser
  }
  package error {
    enum RejectReason {
      AlreadyWithdrawn
    }
  }
  WithdrawApplicablePolicy --> RejectReason
}

@enduml